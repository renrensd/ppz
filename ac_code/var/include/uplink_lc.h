/* Automatically generated by gen_messages from /home/lijie/work/codes/ef01_ac/ac_code/conf/messages_new.xml */
/* Version v5.8.0_stable */
/* Please DO NOT EDIT */
/* Macros to send and receive messages of class lc */
#ifndef _VAR_MESSAGES_lc_H_
#define _VAR_MESSAGES_lc_H_
#include "subsystems/datalink/transport.h"
#include "mcu_periph/link_device.h"
#define DL_LC_BIND_STATE 101
#define PPRZ_MSG_ID_LC_BIND_STATE 101
#define DL_HEART_BEAT_LC_STATE 102
#define PPRZ_MSG_ID_HEART_BEAT_LC_STATE 102
#define DL_MSG_lc_NB 2

#define DOWNLINK_SEND_LC_BIND_STATE(_trans, _dev, serial_code) pprz_msg_send_LC_BIND_STATE(&((_trans).trans_tx), &((_dev).device), AC_ID, serial_code)
static inline void pprz_msg_send_LC_BIND_STATE(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_serial_code) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+0+10*1 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+0+10*1 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+0+10*1 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_LC_BIND_STATE, "LC_BIND_STATE");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_ARRAY, 1 * 10, (void *) _serial_code);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_HEART_BEAT_LC_STATE(_trans, _dev, signal) pprz_msg_send_HEART_BEAT_LC_STATE(&((_trans).trans_tx), &((_dev).device), AC_ID, signal)
static inline void pprz_msg_send_HEART_BEAT_LC_STATE(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint16_t *_signal) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+2 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_HEART_BEAT_LC_STATE, "HEART_BEAT_LC_STATE");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _signal);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}


#define DL_LC_BIND_STATE_serial_code_length(_payload) (10)
#define DL_LC_BIND_STATE_serial_code(_payload) ((uint8_t*)(_payload+2))

#define DL_HEART_BEAT_LC_STATE_signal(_payload) ((uint16_t)(*((uint8_t*)_payload+2)|*((uint8_t*)_payload+2+1)<<8))
#endif // _VAR_MESSAGES_lc_H_
