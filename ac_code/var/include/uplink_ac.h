/* Automatically generated by gen_messages from /home/lijie/work/codes/ef01_ac/ac_code/conf/messages_new.xml */
/* Version v5.8.0_stable */
/* Please DO NOT EDIT */
/* Macros to send and receive messages of class ac */
#ifndef _VAR_MESSAGES_ac_H_
#define _VAR_MESSAGES_ac_H_
#include "subsystems/datalink/transport.h"
#include "mcu_periph/link_device.h"
#if DOWNLINK
#define DL_BIND_RC 1
#define PPRZ_MSG_ID_BIND_RC 1
#define DL_AIRCRAFT_BIND_STATE 101
#define PPRZ_MSG_ID_AIRCRAFT_BIND_STATE 101
#define DL_AIRCRAFT_INFO_STATE 102
#define PPRZ_MSG_ID_AIRCRAFT_INFO_STATE 102
#define DL_HEART_BEAT_AC_GCS_STATE 103
#define PPRZ_MSG_ID_HEART_BEAT_AC_GCS_STATE 103
#define DL_CURRENT_TASK_STATE 104
#define PPRZ_MSG_ID_CURRENT_TASK_STATE 104
#define DL_TASK_ACK_STATE 105
#define PPRZ_MSG_ID_TASK_ACK_STATE 105
#define DL_GET_TASK_ACK_STATE 106
#define PPRZ_MSG_ID_GET_TASK_ACK_STATE 106
#define DL_SET_COMMAND_ACK_STATE 109
#define PPRZ_MSG_ID_SET_COMMAND_ACK_STATE 109
#define DL_HEART_BEAT_AC_RC_STATE 110
#define PPRZ_MSG_ID_HEART_BEAT_AC_RC_STATE 110
#define DL_LAND_TASK_ACK_STATE 111
#define PPRZ_MSG_ID_LAND_TASK_ACK_STATE 111
#define DL_EMERGENCY_RECORD_STATE 112
#define PPRZ_MSG_ID_EMERGENCY_RECORD_STATE 112
#define DL_CALIBRATION_AC_RC_STATE 113
#define PPRZ_MSG_ID_CALIBRATION_AC_RC_STATE 113
#define DL_AIRCRAFT_BIND_ACK_STATE 114
#define PPRZ_MSG_ID_AIRCRAFT_BIND_ACK_STATE 114
#define DL_MSG_ac_NB 13

#define DOWNLINK_SEND_BIND_RC(_trans, _dev, serial_code) pprz_msg_send_BIND_RC(&((_trans).trans_tx), &((_dev).device), AC_ID, serial_code)
static inline void pprz_msg_send_BIND_RC(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_serial_code) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+0+10*1 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+0+10*1 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+0+10*1 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BIND_RC, "BIND_RC");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_ARRAY, 1 * 10, (void *) _serial_code);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_AIRCRAFT_BIND_STATE(_trans, _dev, serial_code, ac_sn) pprz_msg_send_AIRCRAFT_BIND_STATE(&((_trans).trans_tx), &((_dev).device), AC_ID, serial_code, ac_sn)
static inline void pprz_msg_send_AIRCRAFT_BIND_STATE(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, char *_serial_code, char *_ac_sn) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+0+10*1+0+10*1 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+0+10*1+0+10*1 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+0+10*1+0+10*1 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AIRCRAFT_BIND_STATE, "AIRCRAFT_BIND_STATE");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_CHAR, DL_FORMAT_ARRAY, 1 * 10, (void *) _serial_code);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_CHAR, DL_FORMAT_ARRAY, 1 * 10, (void *) _ac_sn);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_AIRCRAFT_INFO_STATE(_trans, _dev, engine_type, max_voyage, battery_capacity, pesticides_capacity, spray_wide, spray_height, max_flight_height, spray_concentration, atomization_grade, max_flight_speed, spray_flight_speed, sn_and_sv) pprz_msg_send_AIRCRAFT_INFO_STATE(&((_trans).trans_tx), &((_dev).device), AC_ID, engine_type, max_voyage, battery_capacity, pesticides_capacity, spray_wide, spray_height, max_flight_height, spray_concentration, atomization_grade, max_flight_speed, spray_flight_speed, sn_and_sv)
static inline void pprz_msg_send_AIRCRAFT_INFO_STATE(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_engine_type, uint16_t *_max_voyage, int32_t *_battery_capacity, int16_t *_pesticides_capacity, uint16_t *_spray_wide, uint16_t *_spray_height, uint16_t *_max_flight_height, uint16_t *_spray_concentration, uint8_t *_atomization_grade, uint16_t *_max_flight_speed, uint16_t *_spray_flight_speed, char *_sn_and_sv) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+2+4+2+2+2+2+2+1+2+2+0+30*1 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+2+4+2+2+2+2+2+1+2+2+0+30*1 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+1+2+4+2+2+2+2+2+1+2+2+0+30*1 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AIRCRAFT_INFO_STATE, "AIRCRAFT_INFO_STATE");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _engine_type);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _max_voyage);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _battery_capacity);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _pesticides_capacity);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _spray_wide);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _spray_height);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _max_flight_height);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _spray_concentration);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _atomization_grade);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _max_flight_speed);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _spray_flight_speed);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_CHAR, DL_FORMAT_ARRAY, 1 * 30, (void *) _sn_and_sv);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_HEART_BEAT_AC_GCS_STATE(_trans, _dev, sys_time, link_gcs_quality, link_rc_quality, link_ac_quality, command_status, flight_status, heading, speed, flight_alt, pos_lng, pos_lat, battery_remain, pesticides_remain, error_code) pprz_msg_send_HEART_BEAT_AC_GCS_STATE(&((_trans).trans_tx), &((_dev).device), AC_ID, sys_time, link_gcs_quality, link_rc_quality, link_ac_quality, command_status, flight_status, heading, speed, flight_alt, pos_lng, pos_lat, battery_remain, pesticides_remain, error_code)
static inline void pprz_msg_send_HEART_BEAT_AC_GCS_STATE(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint16_t *_sys_time, uint8_t *_link_gcs_quality, uint8_t *_link_rc_quality, uint8_t *_link_ac_quality, uint8_t *_command_status, uint16_t *_flight_status, float *_heading, int16_t *_speed, int16_t *_flight_alt, int32_t *_pos_lng, int32_t *_pos_lat, int8_t *_battery_remain, int8_t *_pesticides_remain, uint32_t *_error_code) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+1+1+1+1+2+4+2+2+4+4+1+1+4 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+1+1+1+1+2+4+2+2+4+4+1+1+4 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+2+1+1+1+1+2+4+2+2+4+4+1+1+4 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_HEART_BEAT_AC_GCS_STATE, "HEART_BEAT_AC_GCS_STATE");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _sys_time);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _link_gcs_quality);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _link_rc_quality);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _link_ac_quality);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _command_status);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _flight_status);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_FLOAT, DL_FORMAT_SCALAR, 4, (void *) _heading);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _speed);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_SCALAR, 2, (void *) _flight_alt);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _pos_lng);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _pos_lat);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT8, DL_FORMAT_SCALAR, 1, (void *) _battery_remain);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT8, DL_FORMAT_SCALAR, 1, (void *) _pesticides_remain);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT32, DL_FORMAT_SCALAR, 4, (void *) _error_code);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_CURRENT_TASK_STATE(_trans, _dev, sys_time, wp_current_id, wp_action, state, nb_unexecuted_wp) pprz_msg_send_CURRENT_TASK_STATE(&((_trans).trans_tx), &((_dev).device), AC_ID, sys_time, wp_current_id, wp_action, state, nb_unexecuted_wp)
static inline void pprz_msg_send_CURRENT_TASK_STATE(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint16_t *_sys_time, uint8_t *_wp_current_id, uint8_t *_wp_action, uint8_t *_state, uint8_t *_nb_unexecuted_wp) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+1+1+1+1 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+1+1+1+1 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+2+1+1+1+1 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_CURRENT_TASK_STATE, "CURRENT_TASK_STATE");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _sys_time);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_current_id);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_action);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _state);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _nb_unexecuted_wp);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_TASK_ACK_STATE(_trans, _dev, task_code, task_ack_type, response) pprz_msg_send_TASK_ACK_STATE(&((_trans).trans_tx), &((_dev).device), AC_ID, task_code, task_ack_type, response)
static inline void pprz_msg_send_TASK_ACK_STATE(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_task_code, uint8_t *_task_ack_type, int8_t *_response) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+1+1+1 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_TASK_ACK_STATE, "TASK_ACK_STATE");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _task_code);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _task_ack_type);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT8, DL_FORMAT_SCALAR, 1, (void *) _response);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_GET_TASK_ACK_STATE(_trans, _dev, task_code, wp_type, wp_start_id, wp_end_id, nb_wp_action, wp_action, nb_waypoints_lon, waypoints_lon, nb_waypoints_lat, waypoints_lat) pprz_msg_send_GET_TASK_ACK_STATE(&((_trans).trans_tx), &((_dev).device), AC_ID, task_code, wp_type, wp_start_id, wp_end_id, nb_wp_action, wp_action, nb_waypoints_lon, waypoints_lon, nb_waypoints_lat, waypoints_lat)
static inline void pprz_msg_send_GET_TASK_ACK_STATE(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_task_code, uint8_t *_wp_type, uint8_t *_wp_start_id, uint8_t *_wp_end_id, uint8_t nb_wp_action, uint8_t *_wp_action, uint8_t nb_waypoints_lon, int32_t *_waypoints_lon, uint8_t nb_waypoints_lat, int32_t *_waypoints_lat) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+nb_wp_action*1+1+nb_waypoints_lon*4+1+nb_waypoints_lat*4 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+nb_wp_action*1+1+nb_waypoints_lon*4+1+nb_waypoints_lat*4 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+1+1+1+1+1+nb_wp_action*1+1+nb_waypoints_lon*4+1+nb_waypoints_lat*4 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_GET_TASK_ACK_STATE, "GET_TASK_ACK_STATE");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _task_code);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_type);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_start_id);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_end_id);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_wp_action);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_ARRAY, 1 * nb_wp_action, (void *) _wp_action);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_waypoints_lon);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_ARRAY, 4 * nb_waypoints_lon, (void *) _waypoints_lon);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_waypoints_lat);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_ARRAY, 4 * nb_waypoints_lat, (void *) _waypoints_lat);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_SET_COMMAND_ACK_STATE(_trans, _dev, command_id, command_value, response) pprz_msg_send_SET_COMMAND_ACK_STATE(&((_trans).trans_tx), &((_dev).device), AC_ID, command_id, command_value, response)
static inline void pprz_msg_send_SET_COMMAND_ACK_STATE(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_command_id, uint8_t *_command_value, int8_t *_response) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+1+1+1 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SET_COMMAND_ACK_STATE, "SET_COMMAND_ACK_STATE");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _command_id);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _command_value);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT8, DL_FORMAT_SCALAR, 1, (void *) _response);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_HEART_BEAT_AC_RC_STATE(_trans, _dev, sys_time, ac_state, flight_mode, battery_remain, pesticides_remain, pesticides_threshold, home_state, lock_state, ac_ready, error_code, alert_grade, spray_state) pprz_msg_send_HEART_BEAT_AC_RC_STATE(&((_trans).trans_tx), &((_dev).device), AC_ID, sys_time, ac_state, flight_mode, battery_remain, pesticides_remain, pesticides_threshold, home_state, lock_state, ac_ready, error_code, alert_grade, spray_state)
static inline void pprz_msg_send_HEART_BEAT_AC_RC_STATE(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint16_t *_sys_time, uint8_t *_ac_state, uint8_t *_flight_mode, uint8_t *_battery_remain, uint8_t *_pesticides_remain, uint8_t *_pesticides_threshold, uint8_t *_home_state, uint8_t *_lock_state, uint8_t *_ac_ready, uint8_t *_error_code, uint8_t *_alert_grade, uint8_t *_spray_state) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+2+1+1+1+1+1+1+1+1+1+1+1 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+2+1+1+1+1+1+1+1+1+1+1+1 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+2+1+1+1+1+1+1+1+1+1+1+1 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_HEART_BEAT_AC_RC_STATE, "HEART_BEAT_AC_RC_STATE");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT16, DL_FORMAT_SCALAR, 2, (void *) _sys_time);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ac_state);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _flight_mode);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _battery_remain);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _pesticides_remain);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _pesticides_threshold);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _home_state);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _lock_state);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _ac_ready);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _error_code);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _alert_grade);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _spray_state);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_LAND_TASK_ACK_STATE(_trans, _dev, operation_type, response) pprz_msg_send_LAND_TASK_ACK_STATE(&((_trans).trans_tx), &((_dev).device), AC_ID, operation_type, response)
static inline void pprz_msg_send_LAND_TASK_ACK_STATE(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_operation_type, int8_t *_response) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+1+1 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_LAND_TASK_ACK_STATE, "LAND_TASK_ACK_STATE");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _operation_type);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT8, DL_FORMAT_SCALAR, 1, (void *) _response);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_EMERGENCY_RECORD_STATE(_trans, _dev, wp_type, spray_status, waypoints_lon, waypoints_lat) pprz_msg_send_EMERGENCY_RECORD_STATE(&((_trans).trans_tx), &((_dev).device), AC_ID, wp_type, spray_status, waypoints_lon, waypoints_lat)
static inline void pprz_msg_send_EMERGENCY_RECORD_STATE(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_wp_type, uint8_t *_spray_status, int32_t *_waypoints_lon, int32_t *_waypoints_lat) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+4+4 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+1+1+4+4 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_EMERGENCY_RECORD_STATE, "EMERGENCY_RECORD_STATE");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_type);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _spray_status);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _waypoints_lon);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_SCALAR, 4, (void *) _waypoints_lat);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_CALIBRATION_AC_RC_STATE(_trans, _dev, calibration_ack) pprz_msg_send_CALIBRATION_AC_RC_STATE(&((_trans).trans_tx), &((_dev).device), AC_ID, calibration_ack)
static inline void pprz_msg_send_CALIBRATION_AC_RC_STATE(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_calibration_ack) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+1 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_CALIBRATION_AC_RC_STATE, "CALIBRATION_AC_RC_STATE");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _calibration_ack);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_AIRCRAFT_BIND_ACK_STATE(_trans, _dev, response) pprz_msg_send_AIRCRAFT_BIND_ACK_STATE(&((_trans).trans_tx), &((_dev).device), AC_ID, response)
static inline void pprz_msg_send_AIRCRAFT_BIND_ACK_STATE(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_response) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+1 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_AIRCRAFT_BIND_ACK_STATE, "AIRCRAFT_BIND_ACK_STATE");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _response);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#else // DOWNLINK
#define DOWNLINK_SEND_BIND_RC(_trans, _dev, serial_code) {}
static inline void pprz_msg_send_BIND_RC(struct transport_tx *trans __attribute__((unused)), struct link_device *dev __attribute__((unused)), uint8_t ac_id __attribute__((unused)), uint8_t *_serial_code __attribute__((unused))) {}
#define DOWNLINK_SEND_AIRCRAFT_BIND_STATE(_trans, _dev, serial_code, ac_sn) {}
static inline void pprz_msg_send_AIRCRAFT_BIND_STATE(struct transport_tx *trans __attribute__((unused)), struct link_device *dev __attribute__((unused)), uint8_t ac_id __attribute__((unused)), char *_serial_code __attribute__((unused)), char *_ac_sn __attribute__((unused))) {}
#define DOWNLINK_SEND_AIRCRAFT_INFO_STATE(_trans, _dev, engine_type, max_voyage, battery_capacity, pesticides_capacity, spray_wide, spray_height, max_flight_height, spray_concentration, atomization_grade, max_flight_speed, spray_flight_speed, sn_and_sv) {}
static inline void pprz_msg_send_AIRCRAFT_INFO_STATE(struct transport_tx *trans __attribute__((unused)), struct link_device *dev __attribute__((unused)), uint8_t ac_id __attribute__((unused)), uint8_t *_engine_type __attribute__((unused)), uint16_t *_max_voyage __attribute__((unused)), int32_t *_battery_capacity __attribute__((unused)), int16_t *_pesticides_capacity __attribute__((unused)), uint16_t *_spray_wide __attribute__((unused)), uint16_t *_spray_height __attribute__((unused)), uint16_t *_max_flight_height __attribute__((unused)), uint16_t *_spray_concentration __attribute__((unused)), uint8_t *_atomization_grade __attribute__((unused)), uint16_t *_max_flight_speed __attribute__((unused)), uint16_t *_spray_flight_speed __attribute__((unused)), char *_sn_and_sv __attribute__((unused))) {}
#define DOWNLINK_SEND_HEART_BEAT_AC_GCS_STATE(_trans, _dev, sys_time, link_gcs_quality, link_rc_quality, link_ac_quality, command_status, flight_status, heading, speed, flight_alt, pos_lng, pos_lat, battery_remain, pesticides_remain, error_code) {}
static inline void pprz_msg_send_HEART_BEAT_AC_GCS_STATE(struct transport_tx *trans __attribute__((unused)), struct link_device *dev __attribute__((unused)), uint8_t ac_id __attribute__((unused)), uint16_t *_sys_time __attribute__((unused)), uint8_t *_link_gcs_quality __attribute__((unused)), uint8_t *_link_rc_quality __attribute__((unused)), uint8_t *_link_ac_quality __attribute__((unused)), uint8_t *_command_status __attribute__((unused)), uint16_t *_flight_status __attribute__((unused)), float *_heading __attribute__((unused)), int16_t *_speed __attribute__((unused)), int16_t *_flight_alt __attribute__((unused)), int32_t *_pos_lng __attribute__((unused)), int32_t *_pos_lat __attribute__((unused)), int8_t *_battery_remain __attribute__((unused)), int8_t *_pesticides_remain __attribute__((unused)), uint32_t *_error_code __attribute__((unused))) {}
#define DOWNLINK_SEND_CURRENT_TASK_STATE(_trans, _dev, sys_time, wp_current_id, wp_action, state, nb_unexecuted_wp) {}
static inline void pprz_msg_send_CURRENT_TASK_STATE(struct transport_tx *trans __attribute__((unused)), struct link_device *dev __attribute__((unused)), uint8_t ac_id __attribute__((unused)), uint16_t *_sys_time __attribute__((unused)), uint8_t *_wp_current_id __attribute__((unused)), uint8_t *_wp_action __attribute__((unused)), uint8_t *_state __attribute__((unused)), uint8_t *_nb_unexecuted_wp __attribute__((unused))) {}
#define DOWNLINK_SEND_TASK_ACK_STATE(_trans, _dev, task_code, task_ack_type, response) {}
static inline void pprz_msg_send_TASK_ACK_STATE(struct transport_tx *trans __attribute__((unused)), struct link_device *dev __attribute__((unused)), uint8_t ac_id __attribute__((unused)), uint8_t *_task_code __attribute__((unused)), uint8_t *_task_ack_type __attribute__((unused)), int8_t *_response __attribute__((unused))) {}
#define DOWNLINK_SEND_GET_TASK_ACK_STATE(_trans, _dev, task_code, wp_type, wp_start_id, wp_end_id, nb_wp_action, wp_action, nb_waypoints_lon, waypoints_lon, nb_waypoints_lat, waypoints_lat) {}
static inline void pprz_msg_send_GET_TASK_ACK_STATE(struct transport_tx *trans __attribute__((unused)), struct link_device *dev __attribute__((unused)), uint8_t ac_id __attribute__((unused)), uint8_t *_task_code __attribute__((unused)), uint8_t *_wp_type __attribute__((unused)), uint8_t *_wp_start_id __attribute__((unused)), uint8_t *_wp_end_id __attribute__((unused)), uint8_t nb_wp_action __attribute__((unused)), uint8_t *_wp_action __attribute__((unused)), uint8_t nb_waypoints_lon __attribute__((unused)), int32_t *_waypoints_lon __attribute__((unused)), uint8_t nb_waypoints_lat __attribute__((unused)), int32_t *_waypoints_lat __attribute__((unused))) {}
#define DOWNLINK_SEND_SET_COMMAND_ACK_STATE(_trans, _dev, command_id, command_value, response) {}
static inline void pprz_msg_send_SET_COMMAND_ACK_STATE(struct transport_tx *trans __attribute__((unused)), struct link_device *dev __attribute__((unused)), uint8_t ac_id __attribute__((unused)), uint8_t *_command_id __attribute__((unused)), uint8_t *_command_value __attribute__((unused)), int8_t *_response __attribute__((unused))) {}
#define DOWNLINK_SEND_HEART_BEAT_AC_RC_STATE(_trans, _dev, sys_time, ac_state, flight_mode, battery_remain, pesticides_remain, pesticides_threshold, home_state, lock_state, ac_ready, error_code, alert_grade, spray_state) {}
static inline void pprz_msg_send_HEART_BEAT_AC_RC_STATE(struct transport_tx *trans __attribute__((unused)), struct link_device *dev __attribute__((unused)), uint8_t ac_id __attribute__((unused)), uint16_t *_sys_time __attribute__((unused)), uint8_t *_ac_state __attribute__((unused)), uint8_t *_flight_mode __attribute__((unused)), uint8_t *_battery_remain __attribute__((unused)), uint8_t *_pesticides_remain __attribute__((unused)), uint8_t *_pesticides_threshold __attribute__((unused)), uint8_t *_home_state __attribute__((unused)), uint8_t *_lock_state __attribute__((unused)), uint8_t *_ac_ready __attribute__((unused)), uint8_t *_error_code __attribute__((unused)), uint8_t *_alert_grade __attribute__((unused)), uint8_t *_spray_state __attribute__((unused))) {}
#define DOWNLINK_SEND_LAND_TASK_ACK_STATE(_trans, _dev, operation_type, response) {}
static inline void pprz_msg_send_LAND_TASK_ACK_STATE(struct transport_tx *trans __attribute__((unused)), struct link_device *dev __attribute__((unused)), uint8_t ac_id __attribute__((unused)), uint8_t *_operation_type __attribute__((unused)), int8_t *_response __attribute__((unused))) {}
#define DOWNLINK_SEND_EMERGENCY_RECORD_STATE(_trans, _dev, wp_type, spray_status, waypoints_lon, waypoints_lat) {}
static inline void pprz_msg_send_EMERGENCY_RECORD_STATE(struct transport_tx *trans __attribute__((unused)), struct link_device *dev __attribute__((unused)), uint8_t ac_id __attribute__((unused)), uint8_t *_wp_type __attribute__((unused)), uint8_t *_spray_status __attribute__((unused)), int32_t *_waypoints_lon __attribute__((unused)), int32_t *_waypoints_lat __attribute__((unused))) {}
#define DOWNLINK_SEND_CALIBRATION_AC_RC_STATE(_trans, _dev, calibration_ack) {}
static inline void pprz_msg_send_CALIBRATION_AC_RC_STATE(struct transport_tx *trans __attribute__((unused)), struct link_device *dev __attribute__((unused)), uint8_t ac_id __attribute__((unused)), uint8_t *_calibration_ack __attribute__((unused))) {}
#define DOWNLINK_SEND_AIRCRAFT_BIND_ACK_STATE(_trans, _dev, response) {}
static inline void pprz_msg_send_AIRCRAFT_BIND_ACK_STATE(struct transport_tx *trans __attribute__((unused)), struct link_device *dev __attribute__((unused)), uint8_t ac_id __attribute__((unused)), uint8_t *_response __attribute__((unused))) {}
#endif // DOWNLINK

#define DL_BIND_RC_serial_code_length(_payload) (10)
#define DL_BIND_RC_serial_code(_payload) ((uint8_t*)(_payload+2))

#define DL_AIRCRAFT_BIND_STATE_serial_code_length(_payload) (10)
#define DL_AIRCRAFT_BIND_STATE_serial_code(_payload) ((char*)(_payload+2))
#define DL_AIRCRAFT_BIND_STATE_ac_sn_length(_payload) (10)
#define DL_AIRCRAFT_BIND_STATE_ac_sn(_payload) ((char*)(_payload+12))

#define DL_AIRCRAFT_INFO_STATE_engine_type(_payload) ((uint8_t)(*((uint8_t*)_payload+2)))
#define DL_AIRCRAFT_INFO_STATE_max_voyage(_payload) ((uint16_t)(*((uint8_t*)_payload+3)|*((uint8_t*)_payload+3+1)<<8))
#define DL_AIRCRAFT_INFO_STATE_battery_capacity(_payload) ((int32_t)(*((uint8_t*)_payload+5)|*((uint8_t*)_payload+5+1)<<8|((uint32_t)*((uint8_t*)_payload+5+2))<<16|((uint32_t)*((uint8_t*)_payload+5+3))<<24))
#define DL_AIRCRAFT_INFO_STATE_pesticides_capacity(_payload) ((int16_t)(*((uint8_t*)_payload+9)|*((uint8_t*)_payload+9+1)<<8))
#define DL_AIRCRAFT_INFO_STATE_spray_wide(_payload) ((uint16_t)(*((uint8_t*)_payload+11)|*((uint8_t*)_payload+11+1)<<8))
#define DL_AIRCRAFT_INFO_STATE_spray_height(_payload) ((uint16_t)(*((uint8_t*)_payload+13)|*((uint8_t*)_payload+13+1)<<8))
#define DL_AIRCRAFT_INFO_STATE_max_flight_height(_payload) ((uint16_t)(*((uint8_t*)_payload+15)|*((uint8_t*)_payload+15+1)<<8))
#define DL_AIRCRAFT_INFO_STATE_spray_concentration(_payload) ((uint16_t)(*((uint8_t*)_payload+17)|*((uint8_t*)_payload+17+1)<<8))
#define DL_AIRCRAFT_INFO_STATE_atomization_grade(_payload) ((uint8_t)(*((uint8_t*)_payload+19)))
#define DL_AIRCRAFT_INFO_STATE_max_flight_speed(_payload) ((uint16_t)(*((uint8_t*)_payload+20)|*((uint8_t*)_payload+20+1)<<8))
#define DL_AIRCRAFT_INFO_STATE_spray_flight_speed(_payload) ((uint16_t)(*((uint8_t*)_payload+22)|*((uint8_t*)_payload+22+1)<<8))
#define DL_AIRCRAFT_INFO_STATE_sn_and_sv_length(_payload) (30)
#define DL_AIRCRAFT_INFO_STATE_sn_and_sv(_payload) ((char*)(_payload+24))

#define DL_HEART_BEAT_AC_GCS_STATE_sys_time(_payload) ((uint16_t)(*((uint8_t*)_payload+2)|*((uint8_t*)_payload+2+1)<<8))
#define DL_HEART_BEAT_AC_GCS_STATE_link_gcs_quality(_payload) ((uint8_t)(*((uint8_t*)_payload+4)))
#define DL_HEART_BEAT_AC_GCS_STATE_link_rc_quality(_payload) ((uint8_t)(*((uint8_t*)_payload+5)))
#define DL_HEART_BEAT_AC_GCS_STATE_link_ac_quality(_payload) ((uint8_t)(*((uint8_t*)_payload+6)))
#define DL_HEART_BEAT_AC_GCS_STATE_command_status(_payload) ((uint8_t)(*((uint8_t*)_payload+7)))
#define DL_HEART_BEAT_AC_GCS_STATE_flight_status(_payload) ((uint16_t)(*((uint8_t*)_payload+8)|*((uint8_t*)_payload+8+1)<<8))
#define DL_HEART_BEAT_AC_GCS_STATE_heading(_payload) (({ union { uint32_t u; float f; } _f; _f.u = (uint32_t)(*((uint8_t*)_payload+10)|*((uint8_t*)_payload+10+1)<<8|((uint32_t)*((uint8_t*)_payload+10+2))<<16|((uint32_t)*((uint8_t*)_payload+10+3))<<24); _f.f; }))
#define DL_HEART_BEAT_AC_GCS_STATE_speed(_payload) ((int16_t)(*((uint8_t*)_payload+14)|*((uint8_t*)_payload+14+1)<<8))
#define DL_HEART_BEAT_AC_GCS_STATE_flight_alt(_payload) ((int16_t)(*((uint8_t*)_payload+16)|*((uint8_t*)_payload+16+1)<<8))
#define DL_HEART_BEAT_AC_GCS_STATE_pos_lng(_payload) ((int32_t)(*((uint8_t*)_payload+18)|*((uint8_t*)_payload+18+1)<<8|((uint32_t)*((uint8_t*)_payload+18+2))<<16|((uint32_t)*((uint8_t*)_payload+18+3))<<24))
#define DL_HEART_BEAT_AC_GCS_STATE_pos_lat(_payload) ((int32_t)(*((uint8_t*)_payload+22)|*((uint8_t*)_payload+22+1)<<8|((uint32_t)*((uint8_t*)_payload+22+2))<<16|((uint32_t)*((uint8_t*)_payload+22+3))<<24))
#define DL_HEART_BEAT_AC_GCS_STATE_battery_remain(_payload) ((int8_t)(*((uint8_t*)_payload+26)))
#define DL_HEART_BEAT_AC_GCS_STATE_pesticides_remain(_payload) ((int8_t)(*((uint8_t*)_payload+27)))
#define DL_HEART_BEAT_AC_GCS_STATE_error_code(_payload) ((uint32_t)(*((uint8_t*)_payload+28)|*((uint8_t*)_payload+28+1)<<8|((uint32_t)*((uint8_t*)_payload+28+2))<<16|((uint32_t)*((uint8_t*)_payload+28+3))<<24))

#define DL_CURRENT_TASK_STATE_sys_time(_payload) ((uint16_t)(*((uint8_t*)_payload+2)|*((uint8_t*)_payload+2+1)<<8))
#define DL_CURRENT_TASK_STATE_wp_current_id(_payload) ((uint8_t)(*((uint8_t*)_payload+4)))
#define DL_CURRENT_TASK_STATE_wp_action(_payload) ((uint8_t)(*((uint8_t*)_payload+5)))
#define DL_CURRENT_TASK_STATE_state(_payload) ((uint8_t)(*((uint8_t*)_payload+6)))
#define DL_CURRENT_TASK_STATE_nb_unexecuted_wp(_payload) ((uint8_t)(*((uint8_t*)_payload+7)))

#define DL_TASK_ACK_STATE_task_code(_payload) ((uint8_t)(*((uint8_t*)_payload+2)))
#define DL_TASK_ACK_STATE_task_ack_type(_payload) ((uint8_t)(*((uint8_t*)_payload+3)))
#define DL_TASK_ACK_STATE_response(_payload) ((int8_t)(*((uint8_t*)_payload+4)))

#define DL_GET_TASK_ACK_STATE_task_code(_payload) ((uint8_t)(*((uint8_t*)_payload+2)))
#define DL_GET_TASK_ACK_STATE_wp_type(_payload) ((uint8_t)(*((uint8_t*)_payload+3)))
#define DL_GET_TASK_ACK_STATE_wp_start_id(_payload) ((uint8_t)(*((uint8_t*)_payload+4)))
#define DL_GET_TASK_ACK_STATE_wp_end_id(_payload) ((uint8_t)(*((uint8_t*)_payload+5)))
#define DL_GET_TASK_ACK_STATE_wp_action_length(_payload) ((uint8_t)(*((uint8_t*)_payload+6)))
#define DL_GET_TASK_ACK_STATE_wp_action(_payload) ((uint8_t*)(_payload+7))
#define DL_GET_TASK_ACK_STATE_waypoints_lon_length(_payload) ((uint8_t)(*((uint8_t*)_payload+-1)))
#define DL_GET_TASK_ACK_STATE_waypoints_lon(_payload) ((int32_t*)(_payload+0))
#define DL_GET_TASK_ACK_STATE_waypoints_lat_length(_payload) ((uint8_t)(*((uint8_t*)_payload+-1)))
#define DL_GET_TASK_ACK_STATE_waypoints_lat(_payload) ((int32_t*)(_payload+0))

#define DL_SET_COMMAND_ACK_STATE_command_id(_payload) ((uint8_t)(*((uint8_t*)_payload+2)))
#define DL_SET_COMMAND_ACK_STATE_command_value(_payload) ((uint8_t)(*((uint8_t*)_payload+3)))
#define DL_SET_COMMAND_ACK_STATE_response(_payload) ((int8_t)(*((uint8_t*)_payload+4)))

#define DL_HEART_BEAT_AC_RC_STATE_sys_time(_payload) ((uint16_t)(*((uint8_t*)_payload+2)|*((uint8_t*)_payload+2+1)<<8))
#define DL_HEART_BEAT_AC_RC_STATE_ac_state(_payload) ((uint8_t)(*((uint8_t*)_payload+4)))
#define DL_HEART_BEAT_AC_RC_STATE_flight_mode(_payload) ((uint8_t)(*((uint8_t*)_payload+5)))
#define DL_HEART_BEAT_AC_RC_STATE_battery_remain(_payload) ((uint8_t)(*((uint8_t*)_payload+6)))
#define DL_HEART_BEAT_AC_RC_STATE_pesticides_remain(_payload) ((uint8_t)(*((uint8_t*)_payload+7)))
#define DL_HEART_BEAT_AC_RC_STATE_pesticides_threshold(_payload) ((uint8_t)(*((uint8_t*)_payload+8)))
#define DL_HEART_BEAT_AC_RC_STATE_home_state(_payload) ((uint8_t)(*((uint8_t*)_payload+9)))
#define DL_HEART_BEAT_AC_RC_STATE_lock_state(_payload) ((uint8_t)(*((uint8_t*)_payload+10)))
#define DL_HEART_BEAT_AC_RC_STATE_ac_ready(_payload) ((uint8_t)(*((uint8_t*)_payload+11)))
#define DL_HEART_BEAT_AC_RC_STATE_error_code(_payload) ((uint8_t)(*((uint8_t*)_payload+12)))
#define DL_HEART_BEAT_AC_RC_STATE_alert_grade(_payload) ((uint8_t)(*((uint8_t*)_payload+13)))
#define DL_HEART_BEAT_AC_RC_STATE_spray_state(_payload) ((uint8_t)(*((uint8_t*)_payload+14)))

#define DL_LAND_TASK_ACK_STATE_operation_type(_payload) ((uint8_t)(*((uint8_t*)_payload+2)))
#define DL_LAND_TASK_ACK_STATE_response(_payload) ((int8_t)(*((uint8_t*)_payload+3)))

#define DL_EMERGENCY_RECORD_STATE_wp_type(_payload) ((uint8_t)(*((uint8_t*)_payload+2)))
#define DL_EMERGENCY_RECORD_STATE_spray_status(_payload) ((uint8_t)(*((uint8_t*)_payload+3)))
#define DL_EMERGENCY_RECORD_STATE_waypoints_lon(_payload) ((int32_t)(*((uint8_t*)_payload+4)|*((uint8_t*)_payload+4+1)<<8|((uint32_t)*((uint8_t*)_payload+4+2))<<16|((uint32_t)*((uint8_t*)_payload+4+3))<<24))
#define DL_EMERGENCY_RECORD_STATE_waypoints_lat(_payload) ((int32_t)(*((uint8_t*)_payload+8)|*((uint8_t*)_payload+8+1)<<8|((uint32_t)*((uint8_t*)_payload+8+2))<<16|((uint32_t)*((uint8_t*)_payload+8+3))<<24))

#define DL_CALIBRATION_AC_RC_STATE_calibration_ack(_payload) ((uint8_t)(*((uint8_t*)_payload+2)))

#define DL_AIRCRAFT_BIND_ACK_STATE_response(_payload) ((uint8_t)(*((uint8_t*)_payload+2)))
#endif // _VAR_MESSAGES_ac_H_
