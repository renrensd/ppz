/* Automatically generated by gen_messages from /home/lijie/work/codes/ef01_ac/ac_code/conf/messages_new.xml */
/* Version v5.8.0_stable */
/* Please DO NOT EDIT */
/* Macros to send and receive messages of class gcs */
#ifndef _VAR_MESSAGES_gcs_H_
#define _VAR_MESSAGES_gcs_H_
#include "subsystems/datalink/transport.h"
#include "mcu_periph/link_device.h"
#define DL_SET_CONFIG 1
#define PPRZ_MSG_ID_SET_CONFIG 1
#define DL_SET_COMMAND 2
#define PPRZ_MSG_ID_SET_COMMAND 2
#define DL_ADD_TASK 3
#define PPRZ_MSG_ID_ADD_TASK 3
#define DL_UPDATE_TASK 4
#define PPRZ_MSG_ID_UPDATE_TASK 4
#define DL_DELETE_TASK 5
#define PPRZ_MSG_ID_DELETE_TASK 5
#define DL_GET_TASK 6
#define PPRZ_MSG_ID_GET_TASK 6
#define DL_BIND_AIRCRAFT 7
#define PPRZ_MSG_ID_BIND_AIRCRAFT 7
#define DL_LAND_TASK 8
#define PPRZ_MSG_ID_LAND_TASK 8
#define DL_HEART_BEAT_GCS_STATE 101
#define PPRZ_MSG_ID_HEART_BEAT_GCS_STATE 101
#define DL_EMERGENCY_RECORD_ACK_STATE 102
#define PPRZ_MSG_ID_EMERGENCY_RECORD_ACK_STATE 102
#define DL_MSG_gcs_NB 10

#define DOWNLINK_SEND_SET_CONFIG(_trans, _dev, parameter_id, nb_parameter_value, parameter_value) pprz_msg_send_SET_CONFIG(&((_trans).trans_tx), &((_dev).device), AC_ID, parameter_id, nb_parameter_value, parameter_value)
static inline void pprz_msg_send_SET_CONFIG(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_parameter_id, uint8_t nb_parameter_value, int8_t *_parameter_value) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+nb_parameter_value*1 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+nb_parameter_value*1 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+1+1+nb_parameter_value*1 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SET_CONFIG, "SET_CONFIG");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _parameter_id);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_parameter_value);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT8, DL_FORMAT_ARRAY, 1 * nb_parameter_value, (void *) _parameter_value);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_SET_COMMAND(_trans, _dev, command_id, command_value) pprz_msg_send_SET_COMMAND(&((_trans).trans_tx), &((_dev).device), AC_ID, command_id, command_value)
static inline void pprz_msg_send_SET_COMMAND(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_command_id, uint8_t *_command_value) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+1+1 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_SET_COMMAND, "SET_COMMAND");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _command_id);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _command_value);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_ADD_TASK(_trans, _dev, task_code, wp_type, wp_start_id, wp_end_id, nb_wp_action, wp_action, nb_waypoints_lon, waypoints_lon, nb_waypoints_lat, waypoints_lat) pprz_msg_send_ADD_TASK(&((_trans).trans_tx), &((_dev).device), AC_ID, task_code, wp_type, wp_start_id, wp_end_id, nb_wp_action, wp_action, nb_waypoints_lon, waypoints_lon, nb_waypoints_lat, waypoints_lat)
static inline void pprz_msg_send_ADD_TASK(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_task_code, uint8_t *_wp_type, uint8_t *_wp_start_id, uint8_t *_wp_end_id, uint8_t nb_wp_action, uint8_t *_wp_action, uint8_t nb_waypoints_lon, int32_t *_waypoints_lon, uint8_t nb_waypoints_lat, int32_t *_waypoints_lat) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+nb_wp_action*1+1+nb_waypoints_lon*4+1+nb_waypoints_lat*4 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+nb_wp_action*1+1+nb_waypoints_lon*4+1+nb_waypoints_lat*4 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+1+1+1+1+1+nb_wp_action*1+1+nb_waypoints_lon*4+1+nb_waypoints_lat*4 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_ADD_TASK, "ADD_TASK");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _task_code);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_type);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_start_id);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_end_id);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_wp_action);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_ARRAY, 1 * nb_wp_action, (void *) _wp_action);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_waypoints_lon);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_ARRAY, 4 * nb_waypoints_lon, (void *) _waypoints_lon);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_waypoints_lat);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_ARRAY, 4 * nb_waypoints_lat, (void *) _waypoints_lat);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_UPDATE_TASK(_trans, _dev, task_code, update_type, wp_type, wp_start_id, wp_end_id, nb_wp_action, wp_action, nb_waypoints_lon, waypoints_lon, nb_waypoints_lat, waypoints_lat) pprz_msg_send_UPDATE_TASK(&((_trans).trans_tx), &((_dev).device), AC_ID, task_code, update_type, wp_type, wp_start_id, wp_end_id, nb_wp_action, wp_action, nb_waypoints_lon, waypoints_lon, nb_waypoints_lat, waypoints_lat)
static inline void pprz_msg_send_UPDATE_TASK(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_task_code, uint8_t *_update_type, uint8_t *_wp_type, uint8_t *_wp_start_id, uint8_t *_wp_end_id, uint8_t nb_wp_action, uint8_t *_wp_action, uint8_t nb_waypoints_lon, int32_t *_waypoints_lon, uint8_t nb_waypoints_lat, int32_t *_waypoints_lat) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+1+nb_wp_action*1+1+nb_waypoints_lon*4+1+nb_waypoints_lat*4 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+1+1+1+nb_wp_action*1+1+nb_waypoints_lon*4+1+nb_waypoints_lat*4 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+1+1+1+1+1+1+nb_wp_action*1+1+nb_waypoints_lon*4+1+nb_waypoints_lat*4 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_UPDATE_TASK, "UPDATE_TASK");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _task_code);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _update_type);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_type);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_start_id);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_end_id);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_wp_action);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_ARRAY, 1 * nb_wp_action, (void *) _wp_action);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_waypoints_lon);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_ARRAY, 4 * nb_waypoints_lon, (void *) _waypoints_lon);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_waypoints_lat);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_ARRAY, 4 * nb_waypoints_lat, (void *) _waypoints_lat);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_DELETE_TASK(_trans, _dev, task_code, wp_start_id, wp_end_id) pprz_msg_send_DELETE_TASK(&((_trans).trans_tx), &((_dev).device), AC_ID, task_code, wp_start_id, wp_end_id)
static inline void pprz_msg_send_DELETE_TASK(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_task_code, uint8_t *_wp_start_id, uint8_t *_wp_end_id) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+1+1+1 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_DELETE_TASK, "DELETE_TASK");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _task_code);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_start_id);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_end_id);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_GET_TASK(_trans, _dev, task_code, wp_start_id, wp_end_id) pprz_msg_send_GET_TASK(&((_trans).trans_tx), &((_dev).device), AC_ID, task_code, wp_start_id, wp_end_id)
static inline void pprz_msg_send_GET_TASK(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_task_code, uint8_t *_wp_start_id, uint8_t *_wp_end_id) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+1+1+1 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_GET_TASK, "GET_TASK");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _task_code);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_start_id);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_end_id);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_BIND_AIRCRAFT(_trans, _dev, serial_code, sn_code) pprz_msg_send_BIND_AIRCRAFT(&((_trans).trans_tx), &((_dev).device), AC_ID, serial_code, sn_code)
static inline void pprz_msg_send_BIND_AIRCRAFT(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, char *_serial_code, char *_sn_code) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+0+10*1+0+10*1 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+0+10*1+0+10*1 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+0+10*1+0+10*1 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_BIND_AIRCRAFT, "BIND_AIRCRAFT");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_CHAR, DL_FORMAT_ARRAY, 1 * 10, (void *) _serial_code);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_CHAR, DL_FORMAT_ARRAY, 1 * 10, (void *) _sn_code);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_LAND_TASK(_trans, _dev, operation_type, wp_type, nb_land_type, land_type, nb_waypoints_lon, waypoints_lon, nb_waypoints_lat, waypoints_lat) pprz_msg_send_LAND_TASK(&((_trans).trans_tx), &((_dev).device), AC_ID, operation_type, wp_type, nb_land_type, land_type, nb_waypoints_lon, waypoints_lon, nb_waypoints_lat, waypoints_lat)
static inline void pprz_msg_send_LAND_TASK(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_operation_type, uint8_t *_wp_type, uint8_t nb_land_type, uint8_t *_land_type, uint8_t nb_waypoints_lon, int32_t *_waypoints_lon, uint8_t nb_waypoints_lat, int32_t *_waypoints_lat) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+nb_land_type*1+1+nb_waypoints_lon*4+1+nb_waypoints_lat*4 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+1+nb_land_type*1+1+nb_waypoints_lon*4+1+nb_waypoints_lat*4 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+1+1+1+nb_land_type*1+1+nb_waypoints_lon*4+1+nb_waypoints_lat*4 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_LAND_TASK, "LAND_TASK");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _operation_type);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _wp_type);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_land_type);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_ARRAY, 1 * nb_land_type, (void *) _land_type);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_waypoints_lon);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_ARRAY, 4 * nb_waypoints_lon, (void *) _waypoints_lon);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_waypoints_lat);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT32, DL_FORMAT_ARRAY, 4 * nb_waypoints_lat, (void *) _waypoints_lat);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_HEART_BEAT_GCS_STATE(_trans, _dev, reserve) pprz_msg_send_HEART_BEAT_GCS_STATE(&((_trans).trans_tx), &((_dev).device), AC_ID, reserve)
static inline void pprz_msg_send_HEART_BEAT_GCS_STATE(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_reserve) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+1 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_HEART_BEAT_GCS_STATE, "HEART_BEAT_GCS_STATE");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _reserve);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_EMERGENCY_RECORD_ACK_STATE(_trans, _dev, response) pprz_msg_send_EMERGENCY_RECORD_ACK_STATE(&((_trans).trans_tx), &((_dev).device), AC_ID, response)
static inline void pprz_msg_send_EMERGENCY_RECORD_ACK_STATE(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_response) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+1 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_EMERGENCY_RECORD_ACK_STATE, "EMERGENCY_RECORD_ACK_STATE");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _response);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}


#define DL_SET_CONFIG_parameter_id(_payload) ((uint8_t)(*((uint8_t*)_payload+2)))
#define DL_SET_CONFIG_parameter_value_length(_payload) ((uint8_t)(*((uint8_t*)_payload+3)))
#define DL_SET_CONFIG_parameter_value(_payload) ((int8_t*)(_payload+4))

#define DL_SET_COMMAND_command_id(_payload) ((uint8_t)(*((uint8_t*)_payload+2)))
#define DL_SET_COMMAND_command_value(_payload) ((uint8_t)(*((uint8_t*)_payload+3)))

#define DL_ADD_TASK_task_code(_payload) ((uint8_t)(*((uint8_t*)_payload+2)))
#define DL_ADD_TASK_wp_type(_payload) ((uint8_t)(*((uint8_t*)_payload+3)))
#define DL_ADD_TASK_wp_start_id(_payload) ((uint8_t)(*((uint8_t*)_payload+4)))
#define DL_ADD_TASK_wp_end_id(_payload) ((uint8_t)(*((uint8_t*)_payload+5)))
#define DL_ADD_TASK_wp_action_length(_payload) ((uint8_t)(*((uint8_t*)_payload+6)))
#define DL_ADD_TASK_wp_action(_payload) ((uint8_t*)(_payload+7))
#define DL_ADD_TASK_waypoints_lon_length(_payload) ((uint8_t)(*((uint8_t*)_payload+-1)))
#define DL_ADD_TASK_waypoints_lon(_payload) ((int32_t*)(_payload+0))
#define DL_ADD_TASK_waypoints_lat_length(_payload) ((uint8_t)(*((uint8_t*)_payload+-1)))
#define DL_ADD_TASK_waypoints_lat(_payload) ((int32_t*)(_payload+0))

#define DL_UPDATE_TASK_task_code(_payload) ((uint8_t)(*((uint8_t*)_payload+2)))
#define DL_UPDATE_TASK_update_type(_payload) ((uint8_t)(*((uint8_t*)_payload+3)))
#define DL_UPDATE_TASK_wp_type(_payload) ((uint8_t)(*((uint8_t*)_payload+4)))
#define DL_UPDATE_TASK_wp_start_id(_payload) ((uint8_t)(*((uint8_t*)_payload+5)))
#define DL_UPDATE_TASK_wp_end_id(_payload) ((uint8_t)(*((uint8_t*)_payload+6)))
#define DL_UPDATE_TASK_wp_action_length(_payload) ((uint8_t)(*((uint8_t*)_payload+7)))
#define DL_UPDATE_TASK_wp_action(_payload) ((uint8_t*)(_payload+8))
#define DL_UPDATE_TASK_waypoints_lon_length(_payload) ((uint8_t)(*((uint8_t*)_payload+-1)))
#define DL_UPDATE_TASK_waypoints_lon(_payload) ((int32_t*)(_payload+0))
#define DL_UPDATE_TASK_waypoints_lat_length(_payload) ((uint8_t)(*((uint8_t*)_payload+-1)))
#define DL_UPDATE_TASK_waypoints_lat(_payload) ((int32_t*)(_payload+0))

#define DL_DELETE_TASK_task_code(_payload) ((uint8_t)(*((uint8_t*)_payload+2)))
#define DL_DELETE_TASK_wp_start_id(_payload) ((uint8_t)(*((uint8_t*)_payload+3)))
#define DL_DELETE_TASK_wp_end_id(_payload) ((uint8_t)(*((uint8_t*)_payload+4)))

#define DL_GET_TASK_task_code(_payload) ((uint8_t)(*((uint8_t*)_payload+2)))
#define DL_GET_TASK_wp_start_id(_payload) ((uint8_t)(*((uint8_t*)_payload+3)))
#define DL_GET_TASK_wp_end_id(_payload) ((uint8_t)(*((uint8_t*)_payload+4)))

#define DL_BIND_AIRCRAFT_serial_code_length(_payload) (10)
#define DL_BIND_AIRCRAFT_serial_code(_payload) ((char*)(_payload+2))
#define DL_BIND_AIRCRAFT_sn_code_length(_payload) (10)
#define DL_BIND_AIRCRAFT_sn_code(_payload) ((char*)(_payload+12))

#define DL_LAND_TASK_operation_type(_payload) ((uint8_t)(*((uint8_t*)_payload+2)))
#define DL_LAND_TASK_wp_type(_payload) ((uint8_t)(*((uint8_t*)_payload+3)))
#define DL_LAND_TASK_land_type_length(_payload) ((uint8_t)(*((uint8_t*)_payload+4)))
#define DL_LAND_TASK_land_type(_payload) ((uint8_t*)(_payload+5))
#define DL_LAND_TASK_waypoints_lon_length(_payload) ((uint8_t)(*((uint8_t*)_payload+-1)))
#define DL_LAND_TASK_waypoints_lon(_payload) ((int32_t*)(_payload+0))
#define DL_LAND_TASK_waypoints_lat_length(_payload) ((uint8_t)(*((uint8_t*)_payload+-1)))
#define DL_LAND_TASK_waypoints_lat(_payload) ((int32_t*)(_payload+0))

#define DL_HEART_BEAT_GCS_STATE_reserve(_payload) ((uint8_t)(*((uint8_t*)_payload+2)))

#define DL_EMERGENCY_RECORD_ACK_STATE_response(_payload) ((uint8_t)(*((uint8_t*)_payload+2)))
#endif // _VAR_MESSAGES_gcs_H_
